package com.fr.design.roleAuthority;import com.fr.general.NameObject;import com.fr.design.constants.UIConstants;import com.fr.design.beans.BasicBeanPane;import com.fr.design.file.HistoryTemplateListPane;import com.fr.design.gui.itree.refreshabletree.ExpandMutableTreeNode;import com.fr.design.gui.itree.refreshabletree.UserObjectRefreshJTree;import com.fr.design.mainframe.AuthorityPropertyPane;import com.fr.design.mainframe.DesignerContext;import com.fr.design.mainframe.EastRegionContainerPane;import com.fr.general.ComparatorUtils;import com.fr.general.Inter;import javax.swing.*;import javax.swing.event.TreeSelectionEvent;import javax.swing.event.TreeSelectionListener;import javax.swing.tree.*;import java.awt.*;import java.util.Enumeration;/** * Author : daisy * Date: 13-8-30 * Time: 下午3:32 */public class RoleTree extends UserObjectRefreshJTree<RoleSourceOP> {    private static final long serialVersionUID = 2L;    private String roleName = null;    public RoleTree() {        super();        this.setCellRenderer(roleTreeRenderer);        this.setEnabled(true);        this.setEditable(true);        this.setRowHeight(20);        this.addTreeSelectionListener(new TreeSelectionListener() {            public void valueChanged(TreeSelectionEvent e) {                doWithValueChanged(e);            }        });    }    /**     * 更新UI     */    public void updateUI() {        super.updateUI();        setUI(new UIRoleTreeUI());    }    protected void doWithValueChanged(TreeSelectionEvent e) {        if (e.getNewLeadSelectionPath() != null) {            if (e.getNewLeadSelectionPath().getLastPathComponent().toString() != Inter.getLocText("Role")) {                roleName = e.getNewLeadSelectionPath().getLastPathComponent().toString();                setTabRoleName(roleName);                refreshRoleTree(roleName);                refreshElementAndAuthorityPane();                HistoryTemplateListPane.getInstance().getCurrentEditingTemplate().judgeSheetAuthority(roleName);            }        }    }    protected void setTabRoleName(String roleName) {    }    /**     * 刷新角色树     *     * @param selectedRole 角色     */    public void refreshRoleTree(String selectedRole) {        if (EastRegionContainerPane.getInstance().getUpPane() instanceof AuthorityPropertyPane) {            AuthorityPropertyPane authorityPropertyPane = (AuthorityPropertyPane) EastRegionContainerPane.getInstance().getUpPane();            authorityPropertyPane.populate();            EastRegionContainerPane.getInstance().replaceUpPane(authorityPropertyPane);        }    }    public void setSelectedRole(String selectedRole, TreePath parent) {        ExpandMutableTreeNode node = (ExpandMutableTreeNode) parent.getLastPathComponent();        if (node.children() != null && node.getChildCount() >= 0) {            for (Enumeration e = node.children(); e.hasMoreElements(); ) {                ExpandMutableTreeNode n = (ExpandMutableTreeNode) e.nextElement();                Object userObj = n.getUserObject();                String chilld = null;                if (userObj instanceof String) {                    chilld = (String) userObj;                } else if (userObj instanceof NameObject) {                    NameObject nameObject = (NameObject) userObj;                    chilld = nameObject.getName();                }                if (ComparatorUtils.equals(chilld, selectedRole)) {                    this.setSelectionPath(parent.pathByAddingChild(n));                    return;                } else {                    setSelectedRole(selectedRole, parent.pathByAddingChild(n));                }            }        }    }    private void refreshElementAndAuthorityPane() {        JComponent authorityToolBar = DesignerContext.getDesignerFrame().getToolbarComponent();        if (authorityToolBar instanceof BasicBeanPane) {            //说明是工具栏的            ((BasicBeanPane) authorityToolBar).populateAuthority();        }        HistoryTemplateListPane.getInstance().getCurrentEditingTemplate().repaint();    }    public String getSelectedRoleName() {        return roleName;    }    public void setSelectedRoleName(String name) {        roleName = name;    }    private DefaultTreeCellRenderer roleTreeRenderer = new DefaultTreeCellRenderer() {        private static final long serialVersionUID = 2L;        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);            ExpandMutableTreeNode treeNode = (ExpandMutableTreeNode) value;            Object userObj = treeNode.getUserObject();            if (userObj instanceof String) {                // p:这个是column field.                this.setIcon(null);                this.setText((String) userObj);            } else if (userObj instanceof NameObject) {                NameObject nameObject = (NameObject) userObj;                this.setText(nameObject.getName());                this.setIcon(null);            }            // 这里新建一个Label作为render是因为JTree在动态刷新的时候，节点上render画布的的宽度不会变，会使得一部分比较长的数据显示为"..."            this.setBackgroundNonSelectionColor(UIConstants.NORMAL_BACKGROUND);            this.setForeground(UIConstants.FONT_COLOR);            this.setBackgroundSelectionColor(UIConstants.FLESH_BLUE);            return this;        }    };    /* * p:获得选中的NameObject = name + role. */    public NameObject getSelectedNameObject() {        TreePath selectedTreePath = this.getSelectionPath();        if (selectedTreePath == null) {            return null;        }        ExpandMutableTreeNode selectedTreeNode = (ExpandMutableTreeNode) selectedTreePath.getLastPathComponent();        Object selectedUserObject = selectedTreeNode.getUserObject();        return new NameObject(selectedUserObject.toString(), "");    }    /**     * p:添加一个NameObject节点     * @param no  需要添加的节点     */    public void addNameObject(NameObject no) {        if (no == null) {            return;        }        DefaultTreeModel treeModel = (DefaultTreeModel) this.getModel();        // 新建一个放着NameObject的newChildTreeNode,加到Root下面        ExpandMutableTreeNode root = (ExpandMutableTreeNode) treeModel.getRoot();        ExpandMutableTreeNode newChildTreeNode = new ExpandMutableTreeNode(no);        root.add(newChildTreeNode);        newChildTreeNode.add(new ExpandMutableTreeNode());        treeModel.reload(root);    }    /**     * 刷新树节点     */    public void refreshTreeNode() {        DefaultTreeModel treeModel = (DefaultTreeModel) this.getModel();        ExpandMutableTreeNode root = (ExpandMutableTreeNode) treeModel.getRoot();        if (interceptRefresh(root)) {            return;        }        ExpandMutableTreeNode[] new_nodes = loadChildTreeNodes(root);        java.util.List<DefaultMutableTreeNode> childTreeNodeList = new java.util.ArrayList<DefaultMutableTreeNode>();        for (int i = 0, len = root.getChildCount(); i < len; i++) {            if (root.getChildAt(i) instanceof ExpandMutableTreeNode) {                childTreeNodeList.add((ExpandMutableTreeNode) root.getChildAt(i));            } else {                childTreeNodeList.add((DefaultMutableTreeNode) root.getChildAt(i));            }        }        root.removeAllChildren();        for (int ci = 0; ci < new_nodes.length; ci++) {            Object cUserObject = new_nodes[ci].getUserObject();            for (int ni = 0, nlen = childTreeNodeList.size(); ni < nlen; ni++) {                ExpandMutableTreeNode cTreeNode = (ExpandMutableTreeNode) childTreeNodeList.get(ni);                if (ComparatorUtils.equals(cTreeNode.getUserObject(), cUserObject)) {                    new_nodes[ci].setExpanded(cTreeNode.isExpanded());                    if (cTreeNode.getFirstChild() instanceof ExpandMutableTreeNode && cTreeNode.isExpanded()) {                        checkChildNodes(cTreeNode, new_nodes[ci]);                    }                    break;                }            }            root.add(new_nodes[ci]);        }    }    protected void checkChildNodes(ExpandMutableTreeNode oldNode, ExpandMutableTreeNode newNode) {        for (int i = 0; i < oldNode.getChildCount(); i++) {            ExpandMutableTreeNode oldChild = (ExpandMutableTreeNode) oldNode.getChildAt(i);            for (int j = 0; j < newNode.getChildCount(); j++) {                ExpandMutableTreeNode newChild = (ExpandMutableTreeNode) newNode.getChildAt(j);                ExpandMutableTreeNode[] nodes = RoleTree.this.loadChildTreeNodes(newChild);                for (int k = 0; k < nodes.length; k++) {                    newChild.add(nodes[k]);                }                if (newChild.getChildCount() > 1 && ((ExpandMutableTreeNode) newChild.getFirstChild()).getUserObject() == PENDING) {                    newChild.remove(0);                }                if (ComparatorUtils.equals(oldChild.getUserObject(), newChild.getUserObject())) {                    newChild.setExpanded(oldChild.isExpanded());                }            }        }    }    public NameObject getRealSelectedNameObject() {        TreePath selectedTreePath = this.getSelectionPath();        if (selectedTreePath == null) {            return null;        }        ExpandMutableTreeNode selectedTreeNode = (ExpandMutableTreeNode) selectedTreePath.getLastPathComponent();        Object selectedUserObject = selectedTreeNode.getUserObject();        if (selectedUserObject instanceof NameObject) {            return (NameObject) selectedUserObject;        }        selectedTreeNode = (ExpandMutableTreeNode) selectedTreeNode.getParent();        selectedUserObject = selectedTreeNode.getUserObject();        if (selectedUserObject instanceof NameObject) {            return (NameObject) selectedUserObject;        }        return null;    }}